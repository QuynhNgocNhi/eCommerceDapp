(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('prop-types'), require('@rimble/utils'), require('rimble-ui')) :
  typeof define === 'function' && define.amd ? define('@rimble/network-indicator', ['react', 'prop-types', '@rimble/utils', 'rimble-ui'], factory) :
  (global = global || self, global['@rimble/network-indicator'] = factory(global.React, global.PropTypes, global.RimbleUtils, global.RimbleUi));
}(this, function (React, PropTypes, RimbleUtils, rimbleUi) { 'use strict';

  React = React && React.hasOwnProperty('default') ? React['default'] : React;
  PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;
  RimbleUtils = RimbleUtils && RimbleUtils.hasOwnProperty('default') ? RimbleUtils['default'] : RimbleUtils;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  var RightNetwork = function RightNetwork(_ref) {
    var currentNetwork = _ref.currentNetwork,
        onNetworkMessage = _ref.onNetworkMessage;
    var tooltipMessage = onNetworkMessage === null ? "You're on the right network" : onNetworkMessage;
    return React.createElement(rimbleUi.Tooltip, {
      message: tooltipMessage,
      placement: "bottom"
    }, React.createElement(rimbleUi.Flex, null, React.createElement(rimbleUi.Text, {
      mr: 2
    }, RimbleUtils.getEthNetworkNameById(currentNetwork)), React.createElement(rimbleUi.Icon, {
      name: "CheckCircle",
      color: "#28C081"
    })));
  };

  RightNetwork.propTypes = {
    currentNetwork: PropTypes.number.isRequired
  };

  var WrongNetwork = function WrongNetwork(_ref2) {
    var currentNetwork = _ref2.currentNetwork,
        requiredNetwork = _ref2.requiredNetwork,
        onWrongNetworkMessage = _ref2.onWrongNetworkMessage;
    var tooltipMessage = onWrongNetworkMessage === null ? "You're on the wrong network" : onWrongNetworkMessage;
    return React.createElement(rimbleUi.Tooltip, {
      message: tooltipMessage
    }, React.createElement(rimbleUi.Flex, null, React.createElement(rimbleUi.Text, {
      mr: 2
    }, RimbleUtils.getEthNetworkNameById(currentNetwork)), React.createElement(rimbleUi.Icon, {
      name: "Error",
      color: "#DC2C10"
    })));
  };

  WrongNetwork.propTypes = {
    currentNetwork: PropTypes.number.isRequired,
    requiredNetwork: PropTypes.number.isRequired,
    onWrongNetworkMessage: PropTypes.string
  };

  var NoNetwork = function NoNetwork(_ref3) {
    var noNetworkMessage = _ref3.noNetworkMessage;
    var tooltipMessage = noNetworkMessage === null ? "You're not on an Ethereum network" : noNetworkMessage;
    return React.createElement(rimbleUi.Tooltip, {
      message: tooltipMessage
    }, React.createElement(rimbleUi.Flex, null, React.createElement(rimbleUi.Text, {
      mr: 2
    }, "None"), React.createElement(rimbleUi.Icon, {
      name: "Error",
      color: "#DC2C10"
    })));
  };

  var OnNetwork = function OnNetwork(_ref4) {
    var currentNetwork = _ref4.currentNetwork,
        onNetworkMessage = _ref4.onNetworkMessage;
    return React.createElement("div", null, onNetworkMessage === null ? React.createElement(rimbleUi.Flex, null, React.createElement(rimbleUi.Text, {
      mr: 2
    }, RimbleUtils.getEthNetworkNameById(currentNetwork))) : React.createElement(rimbleUi.Tooltip, {
      message: onNetworkMessage
    }, React.createElement(rimbleUi.Flex, null, React.createElement(rimbleUi.Text, {
      mr: 2
    }, RimbleUtils.getEthNetworkNameById(currentNetwork)))));
  };

  OnNetwork.propTypes = {
    currentNetwork: PropTypes.number.isRequired
  };

  var NetworkIndicator =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(NetworkIndicator, _React$Component);

    function NetworkIndicator() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, NetworkIndicator);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NetworkIndicator)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        isCorrectNetwork: null
      };

      _this.checkCorrectNetwork = function () {
        var isCorrectNetwork = _this.props.currentNetwork === _this.props.requiredNetwork;

        if (isCorrectNetwork !== _this.state.isCorrectNetwork) {
          _this.setState({
            isCorrectNetwork: isCorrectNetwork
          });
        }
      };

      return _this;
    }

    _createClass(NetworkIndicator, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.currentNetwork && this.props.requiredNetwork) {
          this.checkCorrectNetwork();
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this.props.currentNetwork && this.props.requiredNetwork) {
          this.checkCorrectNetwork();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            currentNetwork = _this$props.currentNetwork,
            requiredNetwork = _this$props.requiredNetwork;
        var _this$props$children = this.props.children,
            onNetworkMessage = _this$props$children.onNetworkMessage,
            noNetworkMessage = _this$props$children.noNetworkMessage,
            onRequiredNetworkMessage = _this$props$children.onRequiredNetworkMessage,
            onWrongNetworkMessage = _this$props$children.onWrongNetworkMessage;
        return React.createElement(rimbleUi.Box, null, React.createElement(rimbleUi.Box, {
          display: "inline-block"
        }, React.createElement(rimbleUi.Flex, {
          flexDirection: "column"
        }, React.createElement(rimbleUi.Text, {
          fontSize: 1,
          color: "#a2a2a2",
          caps: true
        }, "Current Network"), this.state.isCorrectNetwork && requiredNetwork ? // Has requiredNetwork prop
        React.createElement(RightNetwork, {
          currentNetwork: currentNetwork,
          onNetworkMessage: onNetworkMessage
        }) : this.state.isCorrectNetwork === false && requiredNetwork ? // Has requiredNetwork prop
        React.createElement(WrongNetwork, {
          currentNetwork: currentNetwork,
          requiredNetwork: requiredNetwork,
          onWrongNetworkMessage: onWrongNetworkMessage
        }) : this.state.isCorrectNetwork === null && requiredNetwork ? // Has requiredNetwork prop
        React.createElement(NoNetwork, {
          noNetworkMessage: noNetworkMessage
        }) : currentNetwork ? React.createElement(OnNetwork, {
          currentNetwork: currentNetwork,
          onNetworkMessage: onNetworkMessage
        }) : React.createElement(NoNetwork, {
          noNetworkMessage: noNetworkMessage
        }))));
      }
    }]);

    return NetworkIndicator;
  }(React.Component);

  NetworkIndicator.propTypes = {
    currentNetwork: PropTypes.number,
    requiredNetwork: PropTypes.number,
    children: PropTypes.shape({
      onNetworkMessage: PropTypes.string,
      noNetworkMessage: PropTypes.string,
      onRequiredNetworkMessage: PropTypes.string,
      onWrongNetworkMessage: PropTypes.string
    })
  };
  NetworkIndicator.defaultProps = {
    currentNetwork: null,
    requiredNetwork: null,
    children: {
      onNetworkMessage: null,
      noNetworkMessage: null,
      onRequiredNetworkMessage: null,
      onWrongNetworkMessage: null
    }
  };
  NetworkIndicator.propTypes = {
    currentNetwork: PropTypes.number,
    requiredNetwork: PropTypes.number
  };

  return NetworkIndicator;

}));
//# sourceMappingURL=index.umd.js.map

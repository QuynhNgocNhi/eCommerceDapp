{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport RimbleUtils from '@rimble/utils';\nimport { Flex, Text, Icon, Tooltip, Box } from 'rimble-ui';\n\nconst RightNetwork = ({ currentNetwork, onNetworkMessage }) => {\n  const tooltipMessage =\n    onNetworkMessage === null\n      ? `You're on the right network`\n      : onNetworkMessage;\n  return (\n    <Tooltip message={tooltipMessage} placement=\"bottom\">\n      <Flex>\n        <Text mr={2}>{RimbleUtils.getEthNetworkNameById(currentNetwork)}</Text>\n        <Icon name=\"CheckCircle\" color=\"#28C081\" />\n      </Flex>\n    </Tooltip>\n  );\n};\n\nRightNetwork.propTypes = {\n  currentNetwork: PropTypes.number.isRequired,\n};\n\nconst WrongNetwork = ({\n  currentNetwork,\n  requiredNetwork,\n  onWrongNetworkMessage,\n}) => {\n  const tooltipMessage =\n    onWrongNetworkMessage === null\n      ? `You're on the wrong network`\n      : onWrongNetworkMessage;\n  return (\n    <Tooltip message={tooltipMessage}>\n      <Flex>\n        <Text mr={2}>{RimbleUtils.getEthNetworkNameById(currentNetwork)}</Text>\n        <Icon name=\"Error\" color=\"#DC2C10\" />\n      </Flex>\n    </Tooltip>\n  );\n};\n\nWrongNetwork.propTypes = {\n  currentNetwork: PropTypes.number.isRequired,\n  requiredNetwork: PropTypes.number.isRequired,\n  onWrongNetworkMessage: PropTypes.string,\n};\n\nconst NoNetwork = ({ noNetworkMessage }) => {\n  const tooltipMessage =\n    noNetworkMessage === null\n      ? `You're not on an Ethereum network`\n      : noNetworkMessage;\n  return (\n    <Tooltip message={tooltipMessage}>\n      <Flex>\n        <Text mr={2}>None</Text>\n        <Icon name=\"Error\" color=\"#DC2C10\" />\n      </Flex>\n    </Tooltip>\n  );\n};\n\nconst OnNetwork = ({ currentNetwork, onNetworkMessage }) => {\n  return (\n    <div>\n      {onNetworkMessage === null ? (\n        <Flex>\n          <Text mr={2}>\n            {RimbleUtils.getEthNetworkNameById(currentNetwork)}\n          </Text>\n        </Flex>\n      ) : (\n        <Tooltip message={onNetworkMessage}>\n          <Flex>\n            <Text mr={2}>\n              {RimbleUtils.getEthNetworkNameById(currentNetwork)}\n            </Text>\n          </Flex>\n        </Tooltip>\n      )}\n    </div>\n  );\n};\n\nOnNetwork.propTypes = {\n  currentNetwork: PropTypes.number.isRequired,\n};\n\nclass NetworkIndicator extends React.Component {\n  static propTypes = {\n    currentNetwork: PropTypes.number,\n    requiredNetwork: PropTypes.number,\n    children: PropTypes.shape({\n      onNetworkMessage: PropTypes.string,\n      noNetworkMessage: PropTypes.string,\n      onRequiredNetworkMessage: PropTypes.string,\n      onWrongNetworkMessage: PropTypes.string,\n    }),\n  };\n  static defaultProps = {\n    currentNetwork: null,\n    requiredNetwork: null,\n    children: {\n      onNetworkMessage: null,\n      noNetworkMessage: null,\n      onRequiredNetworkMessage: null,\n      onWrongNetworkMessage: null,\n    },\n  };\n\n  state = {\n    isCorrectNetwork: null,\n  };\n\n  componentDidMount() {\n    if (this.props.currentNetwork && this.props.requiredNetwork) {\n      this.checkCorrectNetwork();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.currentNetwork && this.props.requiredNetwork) {\n      this.checkCorrectNetwork();\n    }\n  }\n\n  checkCorrectNetwork = () => {\n    const isCorrectNetwork =\n      this.props.currentNetwork === this.props.requiredNetwork;\n\n    if (isCorrectNetwork !== this.state.isCorrectNetwork) {\n      this.setState({ isCorrectNetwork });\n    }\n  };\n\n  render() {\n    const { currentNetwork, requiredNetwork } = this.props;\n\n    const {\n      onNetworkMessage,\n      noNetworkMessage,\n      onRequiredNetworkMessage,\n      onWrongNetworkMessage,\n    } = this.props.children;\n\n    return (\n      <Box>\n        <Box display=\"inline-block\">\n          <Flex flexDirection=\"column\">\n            <Text fontSize={1} color=\"#a2a2a2\" caps>\n              Current Network\n            </Text>\n            {this.state.isCorrectNetwork && requiredNetwork ? (\n              // Has requiredNetwork prop\n              <RightNetwork\n                currentNetwork={currentNetwork}\n                onNetworkMessage={onNetworkMessage}\n              />\n            ) : this.state.isCorrectNetwork === false && requiredNetwork ? (\n              // Has requiredNetwork prop\n              <WrongNetwork\n                currentNetwork={currentNetwork}\n                requiredNetwork={requiredNetwork}\n                onWrongNetworkMessage={onWrongNetworkMessage}\n              />\n            ) : this.state.isCorrectNetwork === null && requiredNetwork ? (\n              // Has requiredNetwork prop\n              <NoNetwork noNetworkMessage={noNetworkMessage} />\n            ) : currentNetwork ? (\n              <OnNetwork\n                currentNetwork={currentNetwork}\n                onNetworkMessage={onNetworkMessage}\n              />\n            ) : (\n              <NoNetwork noNetworkMessage={noNetworkMessage} />\n            )}\n          </Flex>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nNetworkIndicator.propTypes = {\n  currentNetwork: PropTypes.number,\n  requiredNetwork: PropTypes.number,\n};\n\nexport default NetworkIndicator;\n"],"names":["RightNetwork","currentNetwork","onNetworkMessage","tooltipMessage","Tooltip","Flex","Text","RimbleUtils","getEthNetworkNameById","Icon","propTypes","PropTypes","number","isRequired","WrongNetwork","requiredNetwork","onWrongNetworkMessage","string","NoNetwork","noNetworkMessage","OnNetwork","NetworkIndicator","state","isCorrectNetwork","checkCorrectNetwork","props","setState","children","onRequiredNetworkMessage","Box","React","Component","shape","defaultProps"],"mappings":"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"}
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('bowser')) :
  typeof define === 'function' && define.amd ? define('@rimble/utils', ['bowser'], factory) :
  (global = global || self, global.RimbleUtils = factory(global.Bowser));
}(this, function (Bowser) { 'use strict';

  Bowser = Bowser && Bowser.hasOwnProperty('default') ? Bowser['default'] : Bowser;

  var funcs = {
    browserIsWeb3Capable: function browserIsWeb3Capable() {
      // User Agent
      var browser = Bowser.getParser(window.navigator.userAgent);
      var userAgent = browser.parse().parsedResult;
      var validBrowser = browser.satisfies({
        desktop: {
          chrome: '>49',
          firefox: '>52',
          opera: '>36'
        }
      }) ? true : false;
      var web3Capable = validBrowser || funcs.hasWeb3Available();
      return web3Capable;
    },
    // Returns a network name based on a network ID
    getEthNetworkNameById: function getEthNetworkNameById(networkId) {
      var networkName = '';

      if (typeof networkId === 'undefined') {
        networkId = '';
      }

      switch (networkId) {
        case 1:
          networkName = 'Main';
          break;

        case 3:
          networkName = 'Ropsten';
          break;

        case 4:
          networkName = 'Rinkeby';
          break;

        case 5:
          networkName = 'Goerli';
          break;

        case 42:
          networkName = 'Kovan';
          break;

        case '':
          networkName = 'None';
          break;

        default:
          networkName = 'Custom';
          break;
      }

      return networkName;
    },
    // Current browser is detected as mobile
    isMobileDevice: function isMobileDevice() {
      var mobilePlatform = /Mobi|Android/i.test(navigator.userAgent) ? true : false;
      return mobilePlatform;
    },
    // Checks browser window for available web3 or ethereum objects
    hasWeb3Available: function hasWeb3Available() {
      var web3 = typeof window.web3 !== 'undefined';
      var ethereum = typeof window.ethereum !== 'undefined';
      var web3Available = web3 || ethereum;
      return web3Available;
    }
  };

  return funcs;

}));
//# sourceMappingURL=index.umd.js.map

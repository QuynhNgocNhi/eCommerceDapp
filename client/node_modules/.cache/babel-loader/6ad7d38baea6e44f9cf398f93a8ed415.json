{"ast":null,"code":"(function () {\n  // The random number is a js implementation of the Xorshift PRNG\n  var randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n\n  function seedrand(seed) {\n    for (var i = 0; i < randseed.length; i++) {\n      randseed[i] = 0;\n    }\n\n    for (var i = 0; i < seed.length; i++) {\n      randseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i);\n    }\n  }\n\n  function rand() {\n    // based on Java's String.hashCode(), expanded to 4 32bit values\n    var t = randseed[0] ^ randseed[0] << 11;\n    randseed[0] = randseed[1];\n    randseed[1] = randseed[2];\n    randseed[2] = randseed[3];\n    randseed[3] = randseed[3] ^ randseed[3] >> 19 ^ t ^ t >> 8;\n    return (randseed[3] >>> 0) / (1 << 31 >>> 0);\n  }\n\n  function createColor() {\n    //saturation is the whole color spectrum\n    var h = Math.floor(rand() * 360); //saturation goes from 40 to 100, it avoids greyish colors\n\n    var s = rand() * 60 + 40 + '%'; //lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n\n    var l = (rand() + rand() + rand() + rand()) * 25 + '%';\n    var color = 'hsl(' + h + ',' + s + ',' + l + ')';\n    return color;\n  }\n\n  function createImageData(size) {\n    var width = size; // Only support square icons for now\n\n    var height = size;\n    var dataWidth = Math.ceil(width / 2);\n    var mirrorWidth = width - dataWidth;\n    var data = [];\n\n    for (var y = 0; y < height; y++) {\n      var row = [];\n\n      for (var x = 0; x < dataWidth; x++) {\n        // this makes foreground and background color to have a 43% (1/2.3) probability\n        // spot color has 13% chance\n        row[x] = Math.floor(rand() * 2.3);\n      }\n\n      var r = row.slice(0, mirrorWidth);\n      r.reverse();\n      row = row.concat(r);\n\n      for (var i = 0; i < row.length; i++) {\n        data.push(row[i]);\n      }\n    }\n\n    return data;\n  }\n\n  function buildOpts(opts) {\n    var newOpts = {};\n    newOpts.size = opts.size || 8;\n    newOpts.scale = opts.scale || 4;\n    newOpts.seed = opts.seed || Math.floor(Math.random() * Math.pow(10, 16)).toString(16);\n    newOpts.color = opts.color || createColor();\n    newOpts.bgcolor = opts.bgcolor || createColor();\n    newOpts.spotcolor = opts.spotcolor || createColor();\n    seedrand(newOpts.seed);\n    return newOpts;\n  }\n\n  function renderIcon(opts, canvas) {\n    var opts = buildOpts(opts || {});\n    var imageData = createImageData(opts.size);\n    var width = Math.sqrt(imageData.length);\n    canvas.width = canvas.height = opts.size * opts.scale;\n    var cc = canvas.getContext('2d');\n    cc.fillStyle = opts.bgcolor;\n    cc.fillRect(0, 0, canvas.width, canvas.height);\n    cc.fillStyle = opts.color;\n\n    for (var i = 0; i < imageData.length; i++) {\n      // if data is 0, leave the background\n      if (imageData[i]) {\n        var row = Math.floor(i / width);\n        var col = i % width; // if data is 2, choose spot color, if 1 choose foreground\n\n        cc.fillStyle = imageData[i] == 1 ? opts.color : opts.spotcolor;\n        cc.fillRect(col * opts.scale, row * opts.scale, opts.scale, opts.scale);\n      }\n    }\n\n    return canvas;\n  }\n\n  function createIcon(opts) {\n    var opts = buildOpts(opts || {});\n    var canvas = document.createElement('canvas');\n    renderIcon(opts, canvas);\n    return canvas;\n  }\n\n  var api = {\n    create: createIcon,\n    render: renderIcon\n  };\n\n  if (typeof module !== \"undefined\") {\n    module.exports = api;\n  }\n\n  if (typeof window !== \"undefined\") {\n    window.blockies = api;\n  }\n})();","map":{"version":3,"sources":["/home/gerwin/code/gerwinf/blockchain-bootcamp/supply-chain-deployed/client/node_modules/ethereum-blockies/blockies.js"],"names":["randseed","Array","seedrand","seed","i","length","charCodeAt","rand","t","createColor","h","Math","floor","s","l","color","createImageData","size","width","height","dataWidth","ceil","mirrorWidth","data","y","row","x","r","slice","reverse","concat","push","buildOpts","opts","newOpts","scale","random","pow","toString","bgcolor","spotcolor","renderIcon","canvas","imageData","sqrt","cc","getContext","fillStyle","fillRect","col","createIcon","document","createElement","api","create","render","module","exports","window","blockies"],"mappings":"AAAA,CAAC,YAAW;AACX;AACA,MAAIA,QAAQ,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAf,CAFW,CAEkB;;AAE7B,WAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACvB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACK,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACzCJ,MAAAA,QAAQ,CAACI,CAAD,CAAR,GAAc,CAAd;AACA;;AACD,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACrCJ,MAAAA,QAAQ,CAACI,CAAC,GAAC,CAAH,CAAR,GAAiB,CAACJ,QAAQ,CAACI,CAAC,GAAC,CAAH,CAAR,IAAiB,CAAlB,IAAuBJ,QAAQ,CAACI,CAAC,GAAC,CAAH,CAAhC,GAAyCD,IAAI,CAACG,UAAL,CAAgBF,CAAhB,CAAzD;AACA;AACD;;AAED,WAASG,IAAT,GAAgB;AACf;AACA,QAAIC,CAAC,GAAGR,QAAQ,CAAC,CAAD,CAAR,GAAeA,QAAQ,CAAC,CAAD,CAAR,IAAe,EAAtC;AAEAA,IAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAtB;AACAA,IAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAtB;AACAA,IAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAtB;AACAA,IAAAA,QAAQ,CAAC,CAAD,CAAR,GAAeA,QAAQ,CAAC,CAAD,CAAR,GAAeA,QAAQ,CAAC,CAAD,CAAR,IAAe,EAA9B,GAAoCQ,CAApC,GAAyCA,CAAC,IAAI,CAA7D;AAEA,WAAO,CAACR,QAAQ,CAAC,CAAD,CAAR,KAAc,CAAf,KAAsB,KAAK,EAAN,KAAY,CAAjC,CAAP;AACA;;AAED,WAASS,WAAT,GAAuB;AACtB;AACA,QAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAI,KAAK,GAApB,CAAR,CAFsB,CAGtB;;AACA,QAAIM,CAAC,GAAKN,IAAI,KAAK,EAAV,GAAgB,EAAjB,GAAuB,GAA/B,CAJsB,CAKtB;;AACA,QAAIO,CAAC,GAAI,CAACP,IAAI,KAAGA,IAAI,EAAX,GAAcA,IAAI,EAAlB,GAAqBA,IAAI,EAA1B,IAAgC,EAAjC,GAAuC,GAA/C;AAEA,QAAIQ,KAAK,GAAG,SAASL,CAAT,GAAa,GAAb,GAAmBG,CAAnB,GAAuB,GAAvB,GAA6BC,CAA7B,GAAiC,GAA7C;AACA,WAAOC,KAAP;AACA;;AAED,WAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC9B,QAAIC,KAAK,GAAGD,IAAZ,CAD8B,CACZ;;AAClB,QAAIE,MAAM,GAAGF,IAAb;AAEA,QAAIG,SAAS,GAAGT,IAAI,CAACU,IAAL,CAAUH,KAAK,GAAG,CAAlB,CAAhB;AACA,QAAII,WAAW,GAAGJ,KAAK,GAAGE,SAA1B;AAEA,QAAIG,IAAI,GAAG,EAAX;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,MAAnB,EAA2BK,CAAC,EAA5B,EAAgC;AAC/B,UAAIC,GAAG,GAAG,EAAV;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,SAAnB,EAA8BM,CAAC,EAA/B,EAAmC;AAClC;AACA;AACAD,QAAAA,GAAG,CAACC,CAAD,CAAH,GAASf,IAAI,CAACC,KAAL,CAAWL,IAAI,KAAG,GAAlB,CAAT;AACA;;AACD,UAAIoB,CAAC,GAAGF,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAaN,WAAb,CAAR;AACAK,MAAAA,CAAC,CAACE,OAAF;AACAJ,MAAAA,GAAG,GAAGA,GAAG,CAACK,MAAJ,CAAWH,CAAX,CAAN;;AAEA,WAAI,IAAIvB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGqB,GAAG,CAACpB,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AACnCmB,QAAAA,IAAI,CAACQ,IAAL,CAAUN,GAAG,CAACrB,CAAD,CAAb;AACA;AACD;;AAED,WAAOmB,IAAP;AACA;;AAEA,WAASS,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,QAAIC,OAAO,GAAG,EAAd;AAEFA,IAAAA,OAAO,CAACjB,IAAR,GAAegB,IAAI,CAAChB,IAAL,IAAa,CAA5B;AACAiB,IAAAA,OAAO,CAACC,KAAR,GAAgBF,IAAI,CAACE,KAAL,IAAc,CAA9B;AACAD,IAAAA,OAAO,CAAC/B,IAAR,GAAe8B,IAAI,CAAC9B,IAAL,IAAaQ,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACyB,MAAL,KAAczB,IAAI,CAAC0B,GAAL,CAAS,EAAT,EAAY,EAAZ,CAA1B,EAA4CC,QAA5C,CAAqD,EAArD,CAA5B;AACAJ,IAAAA,OAAO,CAACnB,KAAR,GAAgBkB,IAAI,CAAClB,KAAL,IAAcN,WAAW,EAAzC;AACAyB,IAAAA,OAAO,CAACK,OAAR,GAAkBN,IAAI,CAACM,OAAL,IAAgB9B,WAAW,EAA7C;AACAyB,IAAAA,OAAO,CAACM,SAAR,GAAoBP,IAAI,CAACO,SAAL,IAAkB/B,WAAW,EAAjD;AAEAP,IAAAA,QAAQ,CAACgC,OAAO,CAAC/B,IAAT,CAAR;AAEE,WAAO+B,OAAP;AACD;;AAED,WAASO,UAAT,CAAoBR,IAApB,EAA0BS,MAA1B,EAAkC;AAChC,QAAIT,IAAI,GAAGD,SAAS,CAACC,IAAI,IAAI,EAAT,CAApB;AAEF,QAAIU,SAAS,GAAG3B,eAAe,CAACiB,IAAI,CAAChB,IAAN,CAA/B;AACA,QAAIC,KAAK,GAAGP,IAAI,CAACiC,IAAL,CAAUD,SAAS,CAACtC,MAApB,CAAZ;AAEAqC,IAAAA,MAAM,CAACxB,KAAP,GAAewB,MAAM,CAACvB,MAAP,GAAgBc,IAAI,CAAChB,IAAL,GAAYgB,IAAI,CAACE,KAAhD;AAEA,QAAIU,EAAE,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAT;AACAD,IAAAA,EAAE,CAACE,SAAH,GAAed,IAAI,CAACM,OAApB;AACAM,IAAAA,EAAE,CAACG,QAAH,CAAY,CAAZ,EAAe,CAAf,EAAkBN,MAAM,CAACxB,KAAzB,EAAgCwB,MAAM,CAACvB,MAAvC;AACA0B,IAAAA,EAAE,CAACE,SAAH,GAAed,IAAI,CAAClB,KAApB;;AAEA,SAAI,IAAIX,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGuC,SAAS,CAACtC,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AAEzC;AACA,UAAGuC,SAAS,CAACvC,CAAD,CAAZ,EAAiB;AAChB,YAAIqB,GAAG,GAAGd,IAAI,CAACC,KAAL,CAAWR,CAAC,GAAGc,KAAf,CAAV;AACA,YAAI+B,GAAG,GAAG7C,CAAC,GAAGc,KAAd,CAFgB,CAIhB;;AACC2B,QAAAA,EAAE,CAACE,SAAH,GAAgBJ,SAAS,CAACvC,CAAD,CAAT,IAAgB,CAAjB,GAAsB6B,IAAI,CAAClB,KAA3B,GAAmCkB,IAAI,CAACO,SAAvD;AAEDK,QAAAA,EAAE,CAACG,QAAH,CAAYC,GAAG,GAAGhB,IAAI,CAACE,KAAvB,EAA8BV,GAAG,GAAGQ,IAAI,CAACE,KAAzC,EAAgDF,IAAI,CAACE,KAArD,EAA4DF,IAAI,CAACE,KAAjE;AACA;AACD;;AACC,WAAOO,MAAP;AACD;;AAEF,WAASQ,UAAT,CAAoBjB,IAApB,EAA0B;AACvB,QAAIA,IAAI,GAAGD,SAAS,CAACC,IAAI,IAAI,EAAT,CAApB;AACF,QAAIS,MAAM,GAAGS,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AAEEX,IAAAA,UAAU,CAACR,IAAD,EAAOS,MAAP,CAAV;AAEF,WAAOA,MAAP;AACA;;AAED,MAAIW,GAAG,GAAG;AACPC,IAAAA,MAAM,EAAEJ,UADD;AAEPK,IAAAA,MAAM,EAAEd;AAFD,GAAV;;AAKC,MAAI,OAAOe,MAAP,KAAkB,WAAtB,EAAmC;AACjCA,IAAAA,MAAM,CAACC,OAAP,GAAiBJ,GAAjB;AACD;;AACD,MAAI,OAAOK,MAAP,KAAkB,WAAtB,EAAmC;AACjCA,IAAAA,MAAM,CAACC,QAAP,GAAkBN,GAAlB;AACD;AAEF,CAjID","sourcesContent":["(function() {\n\t// The random number is a js implementation of the Xorshift PRNG\n\tvar randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n\n\tfunction seedrand(seed) {\n\t\tfor (var i = 0; i < randseed.length; i++) {\n\t\t\trandseed[i] = 0;\n\t\t}\n\t\tfor (var i = 0; i < seed.length; i++) {\n\t\t\trandseed[i%4] = ((randseed[i%4] << 5) - randseed[i%4]) + seed.charCodeAt(i);\n\t\t}\n\t}\n\n\tfunction rand() {\n\t\t// based on Java's String.hashCode(), expanded to 4 32bit values\n\t\tvar t = randseed[0] ^ (randseed[0] << 11);\n\n\t\trandseed[0] = randseed[1];\n\t\trandseed[1] = randseed[2];\n\t\trandseed[2] = randseed[3];\n\t\trandseed[3] = (randseed[3] ^ (randseed[3] >> 19) ^ t ^ (t >> 8));\n\n\t\treturn (randseed[3]>>>0) / ((1 << 31)>>>0);\n\t}\n\n\tfunction createColor() {\n\t\t//saturation is the whole color spectrum\n\t\tvar h = Math.floor(rand() * 360);\n\t\t//saturation goes from 40 to 100, it avoids greyish colors\n\t\tvar s = ((rand() * 60) + 40) + '%';\n\t\t//lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n\t\tvar l = ((rand()+rand()+rand()+rand()) * 25) + '%';\n\n\t\tvar color = 'hsl(' + h + ',' + s + ',' + l + ')';\n\t\treturn color;\n\t}\n\n\tfunction createImageData(size) {\n\t\tvar width = size; // Only support square icons for now\n\t\tvar height = size;\n\n\t\tvar dataWidth = Math.ceil(width / 2);\n\t\tvar mirrorWidth = width - dataWidth;\n\n\t\tvar data = [];\n\t\tfor(var y = 0; y < height; y++) {\n\t\t\tvar row = [];\n\t\t\tfor(var x = 0; x < dataWidth; x++) {\n\t\t\t\t// this makes foreground and background color to have a 43% (1/2.3) probability\n\t\t\t\t// spot color has 13% chance\n\t\t\t\trow[x] = Math.floor(rand()*2.3);\n\t\t\t}\n\t\t\tvar r = row.slice(0, mirrorWidth);\n\t\t\tr.reverse();\n\t\t\trow = row.concat(r);\n\n\t\t\tfor(var i = 0; i < row.length; i++) {\n\t\t\t\tdata.push(row[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n  function buildOpts(opts) {\n    var newOpts = {};\n\n\t\tnewOpts.size = opts.size || 8;\n\t\tnewOpts.scale = opts.scale || 4;\n\t\tnewOpts.seed = opts.seed || Math.floor((Math.random()*Math.pow(10,16))).toString(16);\n\t\tnewOpts.color = opts.color || createColor();\n\t\tnewOpts.bgcolor = opts.bgcolor || createColor();\n\t\tnewOpts.spotcolor = opts.spotcolor || createColor();\n\n\t\tseedrand(newOpts.seed);\n\n    return newOpts;\n  }\n\n  function renderIcon(opts, canvas) {\n    var opts = buildOpts(opts || {});\n\n\t\tvar imageData = createImageData(opts.size);\n\t\tvar width = Math.sqrt(imageData.length);\n\n\t\tcanvas.width = canvas.height = opts.size * opts.scale;\n\n\t\tvar cc = canvas.getContext('2d');\n\t\tcc.fillStyle = opts.bgcolor;\n\t\tcc.fillRect(0, 0, canvas.width, canvas.height);\n\t\tcc.fillStyle = opts.color;\n\n\t\tfor(var i = 0; i < imageData.length; i++) {\n\n\t\t\t// if data is 0, leave the background\n\t\t\tif(imageData[i]) {\n\t\t\t\tvar row = Math.floor(i / width);\n\t\t\t\tvar col = i % width;\n\n\t\t\t\t// if data is 2, choose spot color, if 1 choose foreground\n\t\t\t  cc.fillStyle = (imageData[i] == 1) ? opts.color : opts.spotcolor;\n\n\t\t\t\tcc.fillRect(col * opts.scale, row * opts.scale, opts.scale, opts.scale);\n\t\t\t}\n\t\t}\n    return canvas;\n  }\n\n\tfunction createIcon(opts) {\n    var opts = buildOpts(opts || {});\n\t\tvar canvas = document.createElement('canvas');\n\n    renderIcon(opts, canvas);\n\n\t\treturn canvas;\n\t}\n\n\tvar api = {\n    create: createIcon,\n    render: renderIcon\n  };\n\n  if (typeof module !== \"undefined\") {\n    module.exports = api;\n  }\n  if (typeof window !== \"undefined\") {\n    window.blockies = api;\n  }\n\n})();\n"]},"metadata":{},"sourceType":"script"}